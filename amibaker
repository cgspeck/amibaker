#!/usr/bin/env python

import yaml
import argparse
from jinja2 import Template
import time
from awsclpy import AWSCLPy

VERSION = '0.1'


class AmiBaker:
    def __init__(self, recipe, **kwargs):
        self.__recipe = yaml.load(recipe)
        self.__render_tags()
        self.__verbose = kwargs.get('verbose', False)
        self.__keep_instance = kwargs.get('keep_instance', False)

    def __render_tags(self):
        def render(tags, **kwargs):
            for key, value in tags.iteritems():
                template = Template(value)
                tags[key] = template.render(**kwargs)

        if self.__recipe['ami_tags']['Name']:
            self.__recipe['ami_tags']['Name'] = 'amibaker - {{ timestamp }}'

        if self.__recipe['ec2_tags']['Name']:
            self.__recipe['ec2_tags']['Name'] = self.__recipe['ami_tags']['Name']

        timestamp = int(time.time())

        render(self.__recipe['ec2_tags'], timestamp=timestamp)
        render(self.__recipe['ami_tags'], timestamp=timestamp)

    def bake(self):
        ec2 = AmiEc2(verbose=self.__verbose, recipe=self.__recipe)
        ec2.instantiate()

        provisioner = Provisioner(ec2)
        provisioner.provision(self.__recipe['provisioning_script'])

        # TODO: make sure image creation works
        self.__image_id = ec2.create_image()

        if not self.__keep_instance:
            ec2.terminate()


class AmiEc2:
    def __init__(self, **kwrags):
        self.__verbose = kwrags.get('verbose', False)
        self.__awscli = AWSCLPy(quiet=not self.__verbose, **kwrags['recipe']['awscli_args'])
        self.__recipe = kwrags['recipe']

    def instantiate(self):
        security_group = self.__recipe.get('security_groups')
        if not security_group:
            self.__create_security_group()
            security_group = self.__security_group

        key_name = self.__recipe.get('key_name')
        if not key_name:
            self.__generate_key_pair()
            key_name = self.__key_name

        instance = self.__awscli.ec2('run-instances',
                                     '--image-id', self.__recipe['base_ami'],
                                     '--key-name', key_name,
                                     '--security-group-ids', security_group,
                                     '--instance-type', self.__recipe['instance_type'],
                                     '--subnet-id', self.__recipe['subnet_id'])

        self.__instance = instance['Instances'][0]

        self.tag(self.__instance['InstanceId'], self.__recipe['ec2_tags'])

    def terminate(self):
        self.__awscli.ec2('terminate-instances',
                          '--instance-ids', self.__instance['InstanceId'])

        if hasattr(self, '__security_group'):
            self.__delete_security_group()

        if hasattr(self, '__key_name'):
            self.__delete_key_pair()

    def get_hostname(self):
        if self.__instance.get('PublicDnsName'):
            return self.__instance['PublicDnsName']
        else:
            if self.__instance.get('PublicIpAddress'):
                return self.__instance['PublicIpAddress']
            elif self.__instance.get('PrivateIpAddress'):
                return self.__instance['PrivateIpAddress']

    def tag(self, resource, tags):
        tags = ["Key=%s,Value=%s" % (key, value) for key, value in tags.iteritems()]

        self.__awscli.ec2('create-tags',
                          '--resources', resource,
                          '--tags', tags)

    def create_image(self):
        image_id = self.__awscli.ec2('create-image',
                                     '--instance-id', self.__instance['InstanceId'],
                                     '--name', self.__recipe['ami_tags']['Name'])

        if not image_id:
            raise Exception('Image creation for instance %s failed.' % self.__instance['InstanceId'])

        self.tag(image_id, self.__recipe['ami_tags'])

        return image_id

    def __get_vpc_id(self):
        subnet = self.__awscli.ec2('describe-subnets',
                                   '--subnet-ids', self.__recipe['subnet_id'])

        return subnet['Subnets'][0]['VpcId']

    def __create_security_group(self):
        vpc_id = self.__get_vpc_id()

        security_group = self.__awscli.ec2('create-security-group',
                                           '--group-name', self.__recipe['ami_tags']['Name'],
                                           '--description', 'Allows temporary SSH access to the box.',
                                           '--vpc-id', vpc_id)

        self.__awscli.ec2('authorize-security-group-ingress',
                          '--group-id', security_group['GroupId'],
                          '--protocol', 'tcp',
                          '--port', 22,
                          '--cidr', '0.0.0.0/0')

        self.__security_group = security_group['GroupId']

    def __delete_security_group(self):
        self.__awscli.ec2('delete-security-group',
                          '--group-id', self.__delete_security_group)

    def __generate_key_pair(self):
        # TODO: generate keypair if not provided
        self.__key_name = None

    def __delete_key_pair(self):
        # TODO: delete key pair if autogenerated
        pass


class Provisioner:
    def __init__(self, ec2):
        self.__ec2 = ec2

    def provision(self, script):
        # TODO: ssh and run provisioning script
        script = '\n'.join([line.strip() for line in script.split('\n')])


if __name__ == "__main__":
    argparser = argparse.ArgumentParser()

    argparser.add_argument('recipe',
                           nargs='+',
                           type=argparse.FileType('r'),
                           help='Recipe to bake image from.')

    argparser.add_argument('-v', '--verbose',
                           action='store_true',
                           help='Prints commands being run in the background.')

    argparser.add_argument('-k', '--keep-instance',
                           action='store_true',
                           help="Keeps EC2 instance after provisioning is done.")

    argparser.add_argument('-V', '--version',
                           action='version',
                           version='%(prog)s ' + VERSION,
                           help='Shows version number.')

    args = argparser.parse_args()

    for recipe in args.recipe:
        baker = AmiBaker(recipe,
                         verbose=args.verbose,
                         keep_instance=args.keep_instance)
        baker.bake()
